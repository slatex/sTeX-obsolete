% \iffalse meta-comment
% A LaTeX Class for CNXML
% Copyright (c) 2019 Michael Kohlhase, all rights reserved
%               this file is released under the
%               Gnu Library Public Licences (LGPL)
%
% The original of this file is in the public repository at 
% http://github.com/sLaTeX/sTeX/
% \fi
% 
% \iffalse
%<class>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<class>\ProvidesClass{cnx}[2015/11/22 v1.0 LaTeX Bindings for CNXML]
%
%<*driver>
\documentclass{ltxdoc}
\usepackage{url,array,float,stex-logo}
\usepackage[show]{ed}
\usepackage[hyperref=auto,style=alphabetic]{biblatex}
\addbibresource{kwarcpubs.bib}
\addbibresource{extpubs.bib}
\addbibresource{kwarccrossrefs.bib}
\addbibresource{extcrossrefs.bib}
\usepackage{ctangit}
\makeindex
\floatstyle{boxed}
\newfloat{exfig}{thp}{lop}
\floatname{exfig}{Example}
\def\tracissue#1{\cite{sTeX:online}, \hyperlink{http://trac.kwarc.info/sTeX/ticket/#1}{issue #1}}
\begin{document}
\RecordChanges
\DocInput{cnx.dtx}
\end{document}
%</driver>
% \fi
% 
%\iffalse\CheckSum{439}\fi
% 
% \changes{v0.1}{2005/12/06}{Initial Version}
% \changes{v0.2}{2006/01/11}{Namespaces now work}
% \changes{v1.0}{2006/01/11}{this is a good as it is every going to get}
% 
% \GetFileInfo{cnx.cls}
% 
% \MakeShortVerb{\|}
%\def\scsys#1{{{\sc #1}}\index{#1@{\sc #1}}}
% \def\xml{\scshape{XML}}
% \def\cnxml{\scshape{CNXml}}
% \def\connexions{\scshape{Connexions}}
% \def\element#1{{\ttfamily{#1}}}
% \def\snippet#1{{\ttfamily{#1}}}
% \def\cnxlatex{CNX\LaTeX}
% \def\mathml{{\scshape{MathML}}}
% \def\latexml{\hbox{{\LaTeX}ML}}
% \title{{\cnxlatex}: A {\LaTeX}-based Syntax for Connexions Modules\thanks{Version {\fileversion}
% (last revised {\filedate})}}
%    \author{Michael Kohlhase\\
%            FAU Erlangen-N\"urnberg\\
%            \url{http://kwarc.info/kohlhase}}
% \maketitle
%
% \begin{abstract}
%   We present {\cnxlatex}, a collection of {\LaTeX} macros that allow to write
%   {\connexions} modules without leaving the {\LaTeX} workflow. Modules are authored in
%   {\cnxlatex} using only a text editor, transformed to PDF and proofread as usual. In
%   particular, the {\LaTeX} workflow is independent of having access to the {\connexions}
%   system, which makes {\cnxlatex} attractive for the initial version of single-author
%   modules.
%   
%   For publication, {\cnxlatex} modules are transformed to {\cnxml} via the {\latexml}
%   translator and can be uploaded to the {\connexions} system.
% \end{abstract}
%
% \newpage\tableofcontents\newpage
%
%\section{Introduction}
%
% The Connexions project is a\ednote{continue; copy from somewhere...}
% 
% The {\cnxml} format --- in particular the embedded content {\mathml} --- is hard to write
% by hand, so we provide a set of environments that allow to embed the {\cnxml} document
% model into {\LaTeX}.
%
%\section{The User Interface}
%
% This document is not a manual for the Connexions XML encoding, or a practical guide how
% to write Connexions modules. We only document the {\LaTeX} bindings for {\cnxml} and will
% presuppose experience with the format or familiarity with\ednote{cite the relevant stuff
%   here}. Note that formatting {\cnxlatex} documents with the {\LaTeX} formatter does
% little to enforce the restrictions imposed by the {\cnxml} document model. You will need to
% run the {\latexml} converter for that (it includes DTD validation) and any CNX-specific
% quality assurance tools after that. \ednote{talk about Content {\mathml} and cmathml.sty
%   somewhere}
% 
% The {\cnxlatex} class makes heavy use of the |KeyVal| package, which is part of your
% {\LaTeX} distribution. This allows to add optional information to {\LaTeX} macros in the
% form of key-value pairs: A macro |\foo| that takes a KeyVal argument and a regular one,
% so a call might look like |\foo{bar}| (no KeyVal information given) or
% |\foo[key1=val1,...,keyn=valn]{bar}|, where |key1|,\dots,|keyn| are predefined keywords
% and values are {\LaTeX} token sequences that do not contain comma characters (though
% they may contain blank characters). If a value needs to contain commas, then it must be
% enclosed in curly braces, as in |\foo[args={a,comma,separated,list}]|. Note that the
% order the key/value pairs appear in a KeyVal Argument is immaterial.
%
% \subsection{Package Options}\label{sec:user:options}
% 
% The |cnx| package takes a single option: \DescribeMacro{showmeta}|showmeta|. If this is
% set, then the metadata keys are shown (see~\cite{Kohlhase:metakeys:ctan} for details and
% customization options).
%
% \subsection{Document Structure}
% 
% \begin{exfig}
%\begin{verbatim}
% \documentclass{cnx}
% \begin{document}
%   \begin{cnxmodule}[name=Hello World,id=m4711]
%     \begin{ccontent}
%       \begin{cpara}[id=p01] Hello World\end{cpara}
%     \end{ccontent}
%   \end{cnxmodule}
% \end{document}
% \end{verbatim}
% \caption{A Minimal {\cnxlatex} Document}\label{fig:minimal}
%\end{exfig}
%
% The first set of {\cnxlatex} environments concern the top-level structure of the
% modules. The minimal Connexions document in {\LaTeX} can be seen in
% Figure~\ref{fig:minimal}: we still need the {\LaTeX} document environment, then
% \DescribeEnv{cnxmodule}
%   the |cnxmodule| environment contains the module-specific information as a KeyVal
%   argument with the two keys: |id| for the module identifier supplied by the
%   {\connexions} system) and |name| for the title of the module.
% 
% \DescribeEnv{ccontent}
%   The |content| environment delineates the module content from the metadata (see
%   Section~\ref{sec:metadata}). It is needed to make the conversion to {\cnxml} simpler.
% 
% \DescribeEnv{c*section}
%   {\cnxml} knows three levels of sectioning, so the {\cnxlatex} class supplies three as
%   well: |csection|, |csubsection| and |csubsubsection|.  In contrast to regular
%   {\LaTeX}, these are environments to keep the tight connection between the
%   formats. These environments take an optional KeyVal argument with key |id| for the
%   identifier and a regular argument for the title of the section (to be transformed into
%   the {\cnxml} {\element{name}} element).
% 
% \DescribeEnv{cpara, cnote}
%   The lowest levels of the document structure are given by paragraphs and notes. The
%   |cpara| and |cnote| environment take a KeyVal argument with the |id| key for
%   identification, the latter also allows a |type| key for the note type (an unspecified
%   string\ednote{what are good values?}).
% 
% 
% \subsection{Mathematics}
% 
% Mathematical formulae are integrated into text via the {\LaTeX} math mode, i.e. wrapped
% in |$| characters or between |\(| and |\)| for inline mathematics and wrapped in |$$| or
% between |\[| and |\]| for display-style math. Note that {\cnxml} expects Content
% {\mathml} as the representation format for mathematical formulae, while run-of-the-mill
% {\LaTeX} only specifies the presentation (i.e. the two-dimensional layout of
% formulae). The {\latexml} converter can usually figure out some of the content {\mathml}
% from regular {\LaTeX}, in other cases, the author has to specify it e.g. using the
% infrastructure supplied by the |cmathml| package.
% 
% \DescribeEnv{cequation}
%   For numbered equations, {\cnxml} supplies the {\element{equation}} element, for which
%   {\cnxlatex} provides the |cequation| environment. This environment takes a KeyVal
%   argument with the |id| key for the (required) identifier.
% 
% 
% \subsection{Statements}
% 
% {\cnxml} provides special elements that make various types of claims; we
% collectively call them statements. 
% 
% \DescribeEnv{cexample}
%   The |cexample| environment and |definition| elements take a KeyVal argument with key
%   |id| for identification.
% 
%
% \DescribeEnv{crule, statement, proof}
%   In {\cnxml}, the {\element{rule}} element is used to represent a general assertion
%   about the state of the world. The {\cnxlatex} |rule|\ednote{we have called this
%     ``crule'', since ``rule'' is already used by {\TeX}.} environment is its {\cnxlatex}
%   counterpart. It takes a KeyVal attribute with the keys |id| for identification, |type|
%   to specify the type of the assertion (e.g. ``Theorem'', ``Lemma'' or ``Conjecture''),
%   and |name|, if the assertion has a title. The body of the |crule| environment contains
%   the statement of assertion in the |statement| environment and (optionally) a proof in
%   the |proof| environment. Both take a KeyVal argument with an |id| key for
%   identification.
% 
%\begin{exfig}
%\begin{verbatim}
%  \begin{crule}[id=prop1,type=Proposition]
%     \begin{statement}[id=prop1s]
%          Sample statement
%     \end{statement}
%     \begin{proof}[id=prop1p]
%           Your favourite proof
%     \end{proof}
%  \end{crule} 
% \end{verbatim}
% \caption{A Basic crule Example}\label{fig:crule}
%\end{exfig}
% 
% \DescribeEnv{definition, cmeaning} A definition defines a new technical term or concept
% for later use. The |definition| environment takes a KeyVal argument with the keys |id|
% for identification and |term| for the concept (definiendum) defined in this form. The
% definition text is given in the |cmeaning| environment\footnote{we have called this
%   |cmeaning|, since |meaning| is already taken by {\TeX}}, which takes a KeyVal argument
% with key |id| for identification. After the |cmeaning| environment, a |definition| can
% contain arbitrarily many |cexample|s.
%
%\begin{exfig}
%\begin{verbatim}
%  \begin{definition}{term=term-to-be-defined, id=termi-def]
%    \begin{cmeaning}[id=termi-meaning]
%      {\term{Term-to-be-defined}} is defined as: Sample meaning
%    \end{cmeaning}
%  \end{definition} 
%\end{verbatim}
% \caption{A Basic {\tt{definition}} and {\tt{cmeaning}} Example}\label{fig:def-cmean}
%\end{exfig}
%
% \subsection{Connexions: Links and Cross-References}
% 
% As the name {\connexions} already suggests, links and cross-references are very
% important for {\connexions} modules. {\cnxml} provides three kinds of them. Module
% links, hyperlinks, and concept references. 
% 
% \DescribeMacro{cnxn}
%   Module links are specified by the |\cnxn| macro, which takes a keyval argument with
%   the keys |document|, |target|, and |strength|. The |document| key allows to specify
%   the module identifier of the desired module in the repository, if it is empty, then
%   the current module is intended. The |target| key allows to specify the document
%   fragment. Its value is the respective identifier (given by its |id| attribute in
%   {\cnxml} or the |id| key of the corresponding environment in {\cnxlatex}). Finally,
%   the |strength| key allows to specify the relevance of the link.
% 
%   The regular argument of the |\cnxn| macro is used to supply the link text. 
% 
%
% \DescribeMacro{link}
%   Hyperlinks can be specified by the |\link| macro in {\cnxlatex}. It takes a KeyVal
%   argument with the key |src| to specify the URL of the link. The regular argument of
%   the |\link| macro is used to supply the link text.
% 
%
% \DescribeMacro{term}
%   The |\term| marco can be used to specify the\ednote{continue, pending Chuck's
%   investigation. }
% 
% 
% \subsection{Metadata}\label{sec:metadata}
% 
% Metadata is mostly managed by the system in {\connexions}, so we often do not need to
% care about it. On the other hand, it influences the system, so if we have work on the
% module extensively before converting it to {\cnxml}, it may be worth-wile specify some of
% the data in advance. 
%
% \begin{exfig}
%\begin{verbatim}
% \begin{metadata}[version=2.19,
%                   created=2000/07/21,revised=2004/08/17 22:07:27.213 GMT-5]
% \begin{authorlist}
%   \cnxauthor[id=miko,firstname=Michael,surname=Kohlhase,
%               email=m.kohlhase@iu-bremen.de]
% \end{authorlist}
% \begin{keywordlist}\keyword{Hello}\end{keywordlist}
% \begin{cnxabstract}
%   A Minimal CNXLaTeX Document
% \end{cnxabstract}
% \end{metadata}
% \end{verbatim}
% \caption{Typical {\cnxlatex} Metadata}\label{fig:metadata}
%\end{exfig}
%
% \DescribeEnv{metadata}
%   The |metadata| environment takes a KeyVal argument with the keys |version|, |created|,
%   and |revised| with the obvious meanings. The latter keys take ISO 8601 norm
%   representations for dates and times.  Concretely, the format is
%   {\snippet{CCYY-MM-DDThh:mm:ss}} where ``{\snippet{CC}}'' represents the century,
%   ``{\snippet{YY}}'' the year, ``{\snippet{MM}}'' the month, and ``{\snippet{DD}}'' the
%   day, preceded by an optional leading ``{\snippet{-}}'' sign to indicate a negative
%   number. If the sign is omitted, ``{\snippet{+}}'' is assumed.  The letter
%   ``{\snippet{T}}'' is the date/time separator and ``{\snippet{hh}}'',
%   ``{\snippet{mm}}'', ``{\snippet{ss}}'' represent hour, minutes, and seconds
%   respectively.
% 
%
% \DescribeEnv{authorlist, maintainerlist}
% The lists of authors and maintainers can be specified in the |authorlist| and
% |maintainerlist| environments, which take no arguments.
% 
% \DescribeMacro{cnxauthor,maintainer}
%   The entries on this lists are specified by the |\cnxauthor| and |\maintainer|
%   macros. Which take a KeyVal argument specifying the individual. The |id| key is the
%   identifier for the person, the |honorific|, |firstname|, |other|, |surname|, and
%   |lineage| keys are used to specify the various name parts, and the |email| key is used
%   to specify the e-mail address of the person.
% 
% 
% \DescribeEnv{keywordlist, keyword}
%   The keywords are specified with a list of |keyword| macros, which take the respective
%   keyword in their only argument, inside a |keyword| environment. Neither take any
%   KeyVal arguments. 
% 
%
% \DescribeEnv{cnxabstract}
%   The abstract of a {\connexions} module is considered to be part of the metadata. It is
%   specified using the |cnxabstract| environment. It does not take any arguments.
% 
% 
% \subsection{Exercises}
%
% \DescribeEnv{cexercise, cproblem, csolution}
%   An exercise or problem in {\connexions} is specified by the |cexercise| environment,
%   which takes an optional keyval argument with the keys |id| and |name|. It must contain
%   a |cproblem| environment for the problem statement and a (possibly) empty set of
%   |csolution| environments. Both of these take an optional keyval argument with the key
%   |id|.
% 
% \subsection{Graphics, etc.}
% 
% \DescribeMacro{cfigure} For graphics we will use the |cfigure|\ednote{probably better
%   call it {\tt{cgraphics}}} macro, which provides a non-floating environment for
% including graphics into {\cnxml} files. |cfigure| takes three arguments first an
% optional {\cnxml} keys, then the keys of the |graphicx| package in a regular argument
% (leave that empty if you don't have any) and finally a path. So 
% \begin{center}
% |\cfigure[id=foo,type=image/jpeg,caption=The first FOO]{width=7cm,height=2cm}{../images/foo}|
% \end{center}
% Would include a graphic from the file at the path |../images/foo|, equip this image with
% a caption, and tell {\latexml} that\ednote{err, exactly what does it tell latexml?} the
% original of the images has the MIME type |image/jpeg|. 
% 
%
% \section{Limitations}\label{sec:limitations}
% 
% In this section we document known limitations. If you want to help alleviate them,
% please feel free to contact the package author. Some of them are currently discussed in
% the \sTeX GitHub repository~\cite{sTeX:github:on}. 
% \begin{compactenum}
% \item none reported yet
% \end{compactenum}
% 
% \StopEventually{\newpage\PrintIndex\newpage\PrintChanges\printbibliography}\newpage
%
% \section{The Implementation}
%
% \subsection{Package Options}\label{sec:impl:options}
%
% We declare some switches which will modify the behavior according to the package
% options. Generally, an option |xxx| will just set the appropriate switches to true
% (otherwise they stay false). First we have the general options
%    \begin{macrocode}
%<*cls>
\DeclareOption{showmeta}{\PassOptionsToPackage{\CurrentOption}{metakeys}}
\DeclareOption*{\PassOptionsToPackage{\CurrentOption}{omdoc}}
%    \end{macrocode}
%    Finally, we need to declare the end of the option declaration section to {\LaTeX}.
%    \begin{macrocode}
\ProcessOptions
%    \end{macrocode}
% 
% We first make sure that the |sref|~\ctancite{Kohlhase:sref} and |graphicx| packages are
% loaded.
%    \begin{macrocode}
\RequirePackage{sref}
\RequirePackage{graphicx}
%    \end{macrocode}
%
% The next step is to declare (a few) class options that handle the paper size; this is
% useful for printing. 
%    \begin{macrocode}
\DeclareOption{letterpaper}
   {\setlength\paperheight {11in}%
    \setlength\paperwidth  {8.5in}}
\DeclareOption{a4paper}
   {\setlength\paperheight {297mm}%
    \setlength\paperwidth  {210mm}}
\ExecuteOptions{letterpaper}
\ProcessOptions
%    \end{macrocode}
% Finally, we input all the usual size settings. There is no sense to use something else,
% and we initialize the page numbering counter and tell it to output the numbers in arabic
% numerals (otherwise label and reference do not work).
%    \begin{macrocode}
\input{size10.clo}
\pagenumbering{roman}
%    \end{macrocode}
% \subsection{Document Structure}
%
% Now, we start with the document structure markup. The |cnxmodule| environment does not
% add anything to the {\LaTeX} output, it's attributes only show up in the {\xml}. There
% we have a slight complication: we have to put an |id| attribute on the |document|
% element in {\cnxml}, but we cannot redefine the |document| environment in
% {\LaTeX}. Therefore we specify the information in the |cnxmodule| environment. This
% means however that we have to put in on the |document| element when we are already past
% this. The solution here is that when we parse the |cnxmodule| environement, we store the
% value and put it on the |document| element when we leave the |document| environment
% (thanks for Ioan Sucan for the code).
% 
% \begin{environment}{cnxmodule}
%    \begin{macrocode}
\addmetakey{cnxmodule}{name}
\srefaddidkey{cnxmodule}{id}
\newenvironment{cnxmodule}[1][]{\metasetkeys{cnxmodule}{#1}}{}
%    \end{macrocode}
% \end{environment}
% 
% \begin{environment}{ccontent}
% The |ccontent| environment is only used for transformation. Its optional |id| attribute
% is not taken up in the {\LaTeX} bindings. 
%    \begin{macrocode}
\newenvironment{ccontent}{}{}
%    \end{macrocode}
% \end{environment}
% 
% \begin{environment}{c*section}
% The sectioning environments employ the obvious nested set of counters. 
%    \begin{macrocode}
\newcounter{section}
\srefaddidkey{sectioning}{id}
\newenvironment{csection}[2][]%
{\stepcounter{section}\strut\\[1.5ex]\noindent%
{\Large\bfseries\arabic{section}.~{#2}}\\[1.5ex]
\metasetkeys{sectioning}{#1}}
{}
\newcounter{subsection}[section]
\newenvironment{csubsection}[2][]
{\refstepcounter{subsection}\strut\\[1ex]\noindent%
{\large\bfseries{\arabic{section}.\arabic{subsection}.~#2\\[1ex]}}%
\metasetkeys{sectioning}{#1}}%
{}
\newcounter{subsubsection}[subsection]
\newenvironment{csubsubsection}[2][]
{\refstepcounter{subsubsection}\strut\\[.5ex]\noindent
{\bfseries\arabic{section}.\arabic{subsection}.\arabic{subsubsecction}~#2\\[.5ex]}%
\metasetkeys{sectioning}{#1}}{}
%    \end{macrocode}
% \end{environment}
% 
% \begin{environment}{cpara}
% For the |<cnx:para>|  element we have to do some work, since we want them to be
% numbered. This handling is adapted from Bruce Miller's |LaTeX.ltxml|
% numbered. 
%    \begin{macrocode}
\srefaddidkey{para}{id}
\newenvironment{cpara}[1][]{\metasetkeys{para}{#1}}{\par}
%    \end{macrocode}
% \end{environment}
% 
% \begin{environment}{cnote}
%    \begin{macrocode}
\srefaddidkey{note}
\addmetakey{note}{type}
\newenvironment{cnote}[1][]%
{\metasetkeys{note}{#1}\par\noindent\strut\hfill\begin{minipage}{10cm}{\bfseries\note@type}:~}%
{\end{minipage}\hfill\strut\par}
%    \end{macrocode}
% \end{environment}
% 
% \subsection{Mathematics}
% 
% \begin{environment}{cequation}
%    \begin{macrocode}
\srefaddidkey{equation}{id}
\newenvironment{cequation}[1][]%
{\metasetkeys{equation}{#1}\begin{displaymath}}
{\end{displaymath}}
%    \end{macrocode}
% \end{environment}
% 
% \subsection{Rich Text}
%
% In this section, we redefine some of {\LaTeX} commands that have their counterparts in
% {\cnxml}. 
%
% \begin{environment}{quote}
%    \begin{macrocode}
\srefaddidkey{cquote}
\addmetakey{cquote}{type}
\addmetakey{cquote}{src}
\newenvironment{cquote}[1][]{%
\metasetkeys{cquote}{#1}\begin{center}\begin{minipage}{.8\textwidth}}{\end{minipage}\end{center}}
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{displaymath}
%   We redefine the abbreviate display math envionment to use the {\cnxml} equation tags,
%   everything else stays the same.\ednote{check {\tt{LaTeX.ltxml}} frequently and try to
%       keep in sync, it would be good, if the code in LaTeXML.ltxml could be modularized,
%       so that the {\tt{cnx}}/{\tt{ltx}} namespace differences could be relegated to
%       config options}
%
%    \begin{macrocode}
\newcommand\litem[2][]{\item[#1]\label{#2}}
%    \end{macrocode}
% \end{environment}
% 
% \subsection{Statements}
% 
% \begin{environment}{cexample}
%    \begin{macrocode}
\srefaddidkey{example}
\addmetakey{example}{name}
\newenvironment{cexample}[1][]{\metasetkeys{example}{#1}
{\ifx\example@name\@empty\else\noindent\bfseries{\example@name}\fi}}
{}
%    \end{macrocode}
% \end{environment}
% 
% \begin{environment}{cexercise}
%   The |cexercise|, |cproblem| and |csolution| environments are very simple to set up for
%   {\LaTeX}. For the {\latexml} side, we simplify matters considerably for the moment by
%   restricting the possibilities we have on the {\cnxml} side: We assume that the content
%   is just one |<cnx:para>| element for the |<cnx:problem>| and |<cnx:solution>|
%   elements.\ednote{relax this when we have automated the generation of {\tt{cnx:para}}
%     elements}
%    \begin{macrocode}
\newcounter{cexercise}
\srefaddidkey{cexercise}
\addmetakey{cexercise}{name}
\newenvironment{cexercise}[1][]{\metasetkeys{cexercise}{#1}
{\ifx\cexercise@name\@empty\else\stepcounter{cexercise}\noindent\bfseries{\cexercise@name~\arabic{cexercise}}\fi}}
{}
\srefaddidkey{cproblem}
\newenvironment{cproblem}[1][]{\metasetkeys{cproblem}{#1}}{}{}
\srefaddidkey{csolution}
\newenvironment{csolution}[1][]{\metasetkeys{csolution}{#1}}{\par\noindent\bfseries{Solution}}{}
%    \end{macrocode}
% \end{environment}
%
% \begin{environment}{crule}
%    \begin{macrocode}
\srefaddidkey{rule}
\addmetakey{rule}{name}
\addmetakey{rule}{type}
\newenvironment{crule}[1][]{\metasetkeys{rule}{#1}%
{\noindent\bfseries{\rule@type:}\ifx\rule@name\@empty\else~(\rule@name)\fi}}%
{}
%    \end{macrocode}
% \end{environment}
% 
% \begin{environment}{statement}
%    \begin{macrocode}
\srefaddidkey{statement}
\newenvironment{statement}[1][]{\metasetkeys{statement}{#1}}{}
%    \end{macrocode}
% \end{environment}
% 
% \begin{environment}{proof}
%    \begin{macrocode}
\srefaddidkey{proof}
\newenvironment{proof}[1][]{\metasetkeys{proof}{#1}}{}
%    \end{macrocode}
% \end{environment}
% 
% \begin{environment}{definition}
%    \begin{macrocode}
\srefaddidkey{definition}
\addmetakey{definition}{term}
\addmetakey{definition}{seealso}
\newenvironment{definition}[1][]{\metasetkeys{definition}{#1}{\noindent\bfseries{Definition:}}}{}
%    \end{macrocode}
% \end{environment}
% 
% \begin{environment}{cmeaning}
%    \begin{macrocode}
\srefaddidkey{meaning}
\newenvironment{cmeaning}[1][]{\metasetkeys{meaning}{#1}}{}
%    \end{macrocode}
% \end{environment}
% 
% \subsection{Conexxions}
% 
% \begin{macro}{cnxn}
%    \begin{macrocode}
\addmetakey{cnxn}{document}
\addmetakey{cnxn}{target}
\addmetakey{cnxn}{strength}
\newcommand\cnxn[2][]% keys, link text
{\metasetkeys{cnxn}{#1}{\underline{#2}}\footnote{{\ttfamily\@ifx\cnxn@document\@empty\cnxn@document\fi\#\cnxn@target}}}
\newcommand\@makefntext[1]{\parindent 1em\noindent\hb@xt@1.8em{\hss\@makefnmark}#1}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{link}
%    \begin{macrocode}
\addmetakey{link}{src}
\newcommand\link[2][]{\metasetkeys{link}{#1}\underline{#2}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{cfigure}
%   The |cfigure| only gives us one of the possible instances of the |<figure>|
%   element\ednote{extend that}.\ednote{do more about required and optional keys in
%     arguments.} In {\LaTeX}, we just pipe the size information through to
%     |includegraphics|, in {\latexml}, we construct the {\cnxml} structure\ednote{what do
%     we do with the graphicx information about size,... CSS?}
%    \begin{macrocode}
\srefaddidkey{cfigure}
\addmetakey{cfigure}{type}
\addmetakey{cfigure}{caption}
\newcounter{figure}
\newcommand\cfigure[3][]{% cnx_keys, graphicx_keys, path
\begin{center}%
\includegraphics[#2]{#3}%
\metasetkeys{cfigure}{#1}\sref@target%
\ifx\cfigure@caption\@empty\else
\par\noindent Figure\refstepcounter{figure} {\arabic{figure}}: \cfigure@caption%
\protected@edef\@currentlabel{\arabic{figure}}%
\sref@label@id{Figure \thefigure}\fi
\end{center}}
%    \end{macrocode}
% \end{macro} 
%
% \begin{macro}{ccite}
%    \begin{macrocode}
\addmetakey{ccite}{src}
\newcommand\ccite[2][]{\metasetkeys{ccite}{#1}\emph{#2}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{term}
%    \begin{macrocode}
\newcommand\term[1]{{\bfseries\underline{#1}}}
%    \end{macrocode}
% \end{macro}
% 
% \subsection{Metadata}
% 
% \begin{environment}{metadata}
%    \begin{macrocode}
\addmetakey{metadata}{version}
\addmetakey{metadata}{created}
\addmetakey{metadata}{revised}
\newsavebox{\metadatabox}
\newenvironment{metadata}[1][]%
{\noindent\hfill\begin{lrbox}{\metadatabox}
\begin{minipage}{.8\textwidth}%
{\Large\bfseries CNX Module: \cnx@name\hfill\strut}\\[2ex]}%
{\end{minipage}\end{lrbox}\fbox{\usebox\metadatabox}\hfill}
% \newenvironment{metadata}[1][]%
% {\noindent\strut\hfill\begin{lrbox}{\metadatabox}\begin{minipage}{10cm}%
% {\strut\hfill\Large\bfseries CNX Module: \cnx@name\hfill\strut}\\[2ex]}%
% {\end{minipage}\end{lrbox}\fbox{\usebox\metadatabox}\hfill\strut\\[3ex]}
%    \end{macrocode}
% \end{environment}
% 
% \begin{environment}{authorlist}
%    \begin{macrocode}
\newenvironment{authorlist}{{\bfseries{Authors}:~}}{\\[1ex]}
%    \end{macrocode}
% \end{environment}
% 
% \begin{environment}{maintainerlist}
%    \begin{macrocode}
\newenvironment{maintainerlist}{{\bfseries{Maintainers}:~}}{\\[1ex]}
%    \end{macrocode}
% \end{environment}
% 
% \begin{macro}{cnxauthor}
%    \begin{macrocode}
\srefaddidkey{auth}
\addmetakey{auth}{honorific}
\addmetakey{auth}{firstname}
\addmetakey{auth}{other}
\addmetakey{auth}{surname}
\addmetakey{auth}{lineage}
\addmetakey{auth}{email}
\newcommand\cnxauthor[1][]{\metasetkeys{auth}{#1}\auth@first~\auth@sur,}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{maintainer}
%    \begin{macrocode}
\newcommand\maintainer[1][]{\metasetkeys{auth}{#1}\auth@first~\auth@sur,}
%    \end{macrocode}
% \end{macro}
% 
% \begin{environment}{keywordlist}
%    \begin{macrocode}
\newenvironment{keywordlist}{\bfseries{Keywords}:~}{\\[1ex]}
%    \end{macrocode}
% \end{environment}
% 
% \begin{macro}{keyword}
%    \begin{macrocode}
\newcommand\keyword[1]{#1,}
%    \end{macrocode}
% \end{macro}
% 
% \begin{environment}{cnxabstract}
%    \begin{macrocode}
\newenvironment{cnxabstract}%
{\par\noindent\strut\hfill\begin{minipage}{10cm}{\bfseries{Abstract}:~}}%
{\end{minipage}\hfill}
%</cls>
%    \end{macrocode}
% \end{environment}
% \Finale
\endinput

% \iffalse
%%% Local Variables: 
%%% mode: doctex
%%% TeX-master: t
%%% End: 
% \fi

% LocalWords:  iffalse cnx cnx.dtx cnx.cls scsys sc sc scshape cnxml ttfamily
% LocalWords:  cnxlatex mathml latexml hbox fileversion maketitle newpage foo
% LocalWords:  tableofcontents newpage ednote cmathml.sty keyn valn keyn exfig
% LocalWords:  DescribeEnv cnxmodule ccontent csection csubsection cpara cnote
% LocalWords:  csubsubsection cmathml cequation cexample crule cmeaning tt tt
% LocalWords:  def-cmean cnxn keyval hh ss authorlist maintainerlist cnxauthor
% LocalWords:  firstname keywordlist cnxabstract cexercise cproblem csolution
% LocalWords:  cfigure cfigure cgraphics graphicx printbibliography textsf sref
% LocalWords:  langle textsf langle ltxml ctancite sref cls setlength ltx
% LocalWords:  paperheight paperwidth size10.clo pagenumbering ltxml.dtd enumi
% LocalWords:  itemizei idprefix itemizeii itemizeiii itemizeiv itemizev enumii
% LocalWords:  itemizevi enumiii enumiv enumv enumvi theenumi theenumii Sucan
% LocalWords:  theenumiii theenumiv theequation textwidth thedocument 
% LocalWords:  environement srefaddidkey newenvironment Semiverbatim
% LocalWords:  OptionalKeyVals newcounter stepcounter noindent bfseries 
% LocalWords:  refstepcounter subsubsection whatsit findnodes hfill
% LocalWords:  displaymath cquote emph eqnarray envionment endeqnarray csname
% LocalWords:  endcsname refnum refnum rcl newcommand itemlevel 
% LocalWords:  footnotesize scriptsize ifx Conexxions makefntext parindent hss
% LocalWords:  makefnmark includegraphics currentlabel thefigure ccite lrbox
% LocalWords:  newsavebox metadatabox fbox usebox auth doctex
